buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

dependencies {
    runtime fileTree(dir: 'libs', include: '*.jar')
}

version = "1.0.0"
group = "magicalsculpture" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "magicalsculpture"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "1.12.2-14.23.5.2768"
    runDir = "run"
    mappings = "snapshot_20171003"
}

sourceSets {
    main {
        java {
            srcDir "src/java"
            srcDir "librikka/src"
        }
        resources {
            srcDir "src/resources"
        }
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


jar.classifier = 'full'
ext.jarFile = zipTree(jar.archivePath)
def libsDir = new File(System.getenv("LIBS_DIR") ?: "build/libs/")
sourceJar.excludes.addAll(["rikka/**"])

task deobfJar(type: Jar) {
    destinationDir = libsDir

    doFirst {
        from(sourceSets.main.output) {
            excludes.addAll(["rikka/**"])
        }
    }
    classifier = 'dev'
}

task standaloneJar(type: Jar, dependsOn: reobfJar) {
    destinationDir = libsDir

    doFirst {
        from(project.ext.jarFile) {
            excludes.addAll(["rikka/**"])
        }
    }
}

build.dependsOn deobfJar, standaloneJar